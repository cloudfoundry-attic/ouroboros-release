#!/bin/bash -e

<%
if_link("reverse_log_proxy") do |rlp|
  rlp_addrs = rlp.instances.map do |instance|
    "#{instance.address}:#{rlp.p("reverse_log_proxy.egress.port")}"
  end
end

tc = link("trafficcontroller")
tc_addrs = tc.instances.map do |instance|
  "ws://#{instance.address}:#{tc.p("loggregator.outgoing_dropsonde_port")}"
end

if_link("syslogr") do |syslogr|
  drain_urls = syslogr.instances.map do |instance|
    [
      "syslog://#{instance.address}:#{syslogr.p("syslogr.port")}",
      "https://#{instance.address}:#{syslogr.p("syslogr.https_port")}",
    ]
  end.flatten
end
%>

CERT_DIR=/var/vcap/jobs/volley/certs
RUN_DIR=/var/vcap/sys/run/volley
LOG_DIR=/var/vcap/sys/log/volley
PIDFILE=$RUN_DIR/volley.pid

mkdir -p $RUN_DIR
mkdir -p $LOG_DIR

source /var/vcap/packages/common/pid_utils.sh
source /var/vcap/packages/common/syslog_utils.sh

tee_output_to_sys_log "$LOG_DIR"

case $1 in

  start)
    pid_guard $PIDFILE "LoggregatorVolley"

    ulimit -l unlimited
    ulimit -n 65536

    exec >>$LOG_DIR/volley.stdout.log \
        2>>$LOG_DIR/volley.stderr.log

    chown -R vcap:vcap $LOG_DIR

    <% if drain_urls && drain_urls.length > 0 %>
      export SYSLOG_DRAIN_URLS="<%= drain_urls.join(",") %>"
    <% end %>

    <% if rlp_addrs && rlp_addrs.length > 0 %>
      export RLP_ADDRS="<%= rlp_addrs.join(",") %>"
    <% end %>

    export TC_ADDRS="<%= tc_addrs.join(",") %>"
    export AUTH_TOKEN="<%= p("volley.auth_token") %>"
    export FIREHOSE_COUNT="<%= p("volley.firehose_count") %>"
    export STREAM_COUNT="<%= p("volley.stream_count") %>"
    export CONTAINER_METRIC_COUNT="<%= p("volley.container_metric_count") %>"
    export RECENT_LOG_COUNT="<%= p("volley.recent_log_count") %>"
    export SUB_ID="<%= p("volley.subscription_id") %>"
    export RECV_DELAY="<%= p("volley.receive_delay") %>"
    export ASYNC_REQUEST_DELAY="<%= p("volley.async_request_delay") %>"
    export KILL_DELAY="<%= p("volley.kill_delay") %>"
    export SYSLOG_DRAINS="<%= p("volley.syslog_drains") %>"
    export SYSLOG_TTL="<%= p("volley.syslog_ttl") %>"
    export METRON_PORT="<%= p("metron_agent.listening_port") %>"
    export METRIC_BATCH_INTERVAL="<%= p("volley.metric_batch_interval") %>"
    export V2_TLS_CERT_PATH="$CERT_DIR/volley_rlp.crt"
    export V2_TLS_KEY_PATH="$CERT_DIR/volley_rlp.key"
    export V2_TLS_CA_PATH="$CERT_DIR/ca.crt"

    export CUPS_PORT="<%= p('volley.cups.port') %>"
    export CUPS_SERVER_CN="<%= p('volley.cups.tls.common_name') %>"
    export CUPS_SERVER_CERT="$CERT_DIR/cups_server.crt"
    export CUPS_SERVER_KEY="$CERT_DIR/cups_server.key"
    export CUPS_SERVER_CA="$CERT_DIR/cups_ca.crt"

    chpst -u vcap:vcap /var/vcap/packages/volley/bin/volley &

    echo $! > $PIDFILE

    ;;

  stop)
    kill_and_wait $PIDFILE 40

    ;;

  *)
    echo "Usage: volley_ctl {start|stop}"

    ;;

esac
