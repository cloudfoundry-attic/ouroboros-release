// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package drains_test

import (
	"time"

	"github.com/coreos/etcd/client"
	"golang.org/x/net/context"
)

type mockIDGetter struct {
	GetCalled chan bool
	GetOutput struct {
		Id chan string
	}
}

func newMockIDGetter() *mockIDGetter {
	m := &mockIDGetter{}
	m.GetCalled = make(chan bool, 100)
	m.GetOutput.Id = make(chan string, 100)
	return m
}
func (m *mockIDGetter) Get() (id string) {
	m.GetCalled <- true
	return <-m.GetOutput.Id
}

type mockETCDSetter struct {
	SetCalled chan bool
	SetInput  struct {
		Ctx        chan context.Context
		Key, Value chan string
		Opts       chan *client.SetOptions
	}
	SetOutput struct {
		Ret0 chan *client.Response
		Ret1 chan error
	}
}

func newMockETCDSetter() *mockETCDSetter {
	m := &mockETCDSetter{}
	m.SetCalled = make(chan bool, 100)
	m.SetInput.Ctx = make(chan context.Context, 100)
	m.SetInput.Key = make(chan string, 100)
	m.SetInput.Value = make(chan string, 100)
	m.SetInput.Opts = make(chan *client.SetOptions, 100)
	m.SetOutput.Ret0 = make(chan *client.Response, 100)
	m.SetOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockETCDSetter) Set(ctx context.Context, key, value string, opts *client.SetOptions) (*client.Response, error) {
	m.SetCalled <- true
	m.SetInput.Ctx <- ctx
	m.SetInput.Key <- key
	m.SetInput.Value <- value
	m.SetInput.Opts <- opts
	return <-m.SetOutput.Ret0, <-m.SetOutput.Ret1
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
