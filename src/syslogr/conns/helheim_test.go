// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package conns_test

import (
	"time"

	"github.com/cloudfoundry/dropsonde/metricbatcher"
)

type mockReader struct {
	ReadCalled chan bool
	ReadInput  struct {
		Buf chan []byte
	}
	ReadOutput struct {
		Len chan int
		Err chan error
	}
}

func newMockReader() *mockReader {
	m := &mockReader{}
	m.ReadCalled = make(chan bool, 100)
	m.ReadInput.Buf = make(chan []byte, 100)
	m.ReadOutput.Len = make(chan int, 100)
	m.ReadOutput.Err = make(chan error, 100)
	return m
}
func (m *mockReader) Read(buf []byte) (len int, err error) {
	m.ReadCalled <- true
	m.ReadInput.Buf <- buf
	return <-m.ReadOutput.Len, <-m.ReadOutput.Err
}

type mockRanger struct {
	DelayRangeCalled chan bool
	DelayRangeOutput struct {
		Min, Max chan time.Duration
	}
}

func newMockRanger() *mockRanger {
	m := &mockRanger{}
	m.DelayRangeCalled = make(chan bool, 100)
	m.DelayRangeOutput.Min = make(chan time.Duration, 100)
	m.DelayRangeOutput.Max = make(chan time.Duration, 100)
	return m
}
func (m *mockRanger) DelayRange() (min, max time.Duration) {
	m.DelayRangeCalled <- true
	return <-m.DelayRangeOutput.Min, <-m.DelayRangeOutput.Max
}

type mockMetricBatcher struct {
	BatchCounterCalled chan bool
	BatchCounterInput  struct {
		Name chan string
	}
	BatchCounterOutput struct {
		Ret0 chan metricbatcher.BatchCounterChainer
	}
}

func newMockMetricBatcher() *mockMetricBatcher {
	m := &mockMetricBatcher{}
	m.BatchCounterCalled = make(chan bool, 100)
	m.BatchCounterInput.Name = make(chan string, 100)
	m.BatchCounterOutput.Ret0 = make(chan metricbatcher.BatchCounterChainer, 100)
	return m
}
func (m *mockMetricBatcher) BatchCounter(name string) metricbatcher.BatchCounterChainer {
	m.BatchCounterCalled <- true
	m.BatchCounterInput.Name <- name
	return <-m.BatchCounterOutput.Ret0
}

type mockBatchCounterChainer struct {
	SetTagCalled chan bool
	SetTagInput  struct {
		Key, Value chan string
	}
	SetTagOutput struct {
		Ret0 chan metricbatcher.BatchCounterChainer
	}
	IncrementCalled chan bool
	AddCalled       chan bool
	AddInput        struct {
		Value chan uint64
	}
}

func newMockBatchCounterChainer() *mockBatchCounterChainer {
	m := &mockBatchCounterChainer{}
	m.SetTagCalled = make(chan bool, 100)
	m.SetTagInput.Key = make(chan string, 100)
	m.SetTagInput.Value = make(chan string, 100)
	m.SetTagOutput.Ret0 = make(chan metricbatcher.BatchCounterChainer, 100)
	m.IncrementCalled = make(chan bool, 100)
	m.AddCalled = make(chan bool, 100)
	m.AddInput.Value = make(chan uint64, 100)
	return m
}
func (m *mockBatchCounterChainer) SetTag(key, value string) metricbatcher.BatchCounterChainer {
	m.SetTagCalled <- true
	m.SetTagInput.Key <- key
	m.SetTagInput.Value <- value
	return <-m.SetTagOutput.Ret0
}
func (m *mockBatchCounterChainer) Increment() {
	m.IncrementCalled <- true
}
func (m *mockBatchCounterChainer) Add(value uint64) {
	m.AddCalled <- true
	m.AddInput.Value <- value
}
